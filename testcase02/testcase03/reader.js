<script> (() => { const html = document.documentElement; const body = document.body; const KEY = 'reader:settings'; // Helpers const $ = (id) => document.getElementById(id); const setVar = (k, v) => html.style.setProperty(k, v); const getVar = (n, fallback) => { const v = getComputedStyle(html).getPropertyValue(n).trim(); return v || fallback; }; // Defaults from tokens const defaults = { theme: body.className.match(/theme-\w+/)?.[0] || 'theme-light', mag: html.getAttribute('data-mag') || '', imgmode: html.getAttribute('data-img-mode') || 'normal', focus: body.classList.contains('focus-mode'), family: getVar('--reader-font-family', 'ui-serif, Georgia, Cambria, "Times New Roman", Times, serif'), size: parseFloat(getVar('--reader-font-size', '1')) || 1.0, measure: parseInt(getVar('--reader-max-width', '45ch'), 10) || 45, leading: parseFloat(getVar('--reader-line-height', '1.6')) || 1.6, align: getVar('--reader-text-align', 'left') || 'left', lspace: parseFloat(getVar('--reader-letter-spacing', '0')) || 0, wspace: parseFloat(getVar('--reader-word-spacing', '0')) || 0 }; let state = { ...defaults }; function render() { // Theme and structural toggles body.classList.remove('theme-light','theme-dark','theme-sepia','theme-gray','theme-high-contrast'); body.classList.add(state.theme); if (state.mag) html.setAttribute('data-mag', state.mag); else html.removeAttribute('data-mag'); html.setAttribute('data-img-mode', state.imgmode); body.classList.toggle('focus-mode', !!state.focus); $('focus').setAttribute('aria-pressed', state.focus ? 'true' : 'false'); // Tokens setVar('--reader-font-family', state.family); setVar('--reader-font-size', state.size + 'rem'); $('sizeOut').value = state.size.toFixed(2) + 'rem'; setVar('--reader-max-width', state.measure + 'ch'); $('measureOut').value = state.measure + 'ch'; setVar('--reader-line-height', state.leading); $('leadingOut').value = state.leading.toFixed(2); setVar('--reader-text-align', state.align); setVar('--reader-letter-spacing', state.lspace + 'em'); setVar('--reader-word-spacing', state.wspace + 'em'); // Inputs $('theme').value = state.theme; $('mag').value = state.mag; $('imgmode').value = state.imgmode; $('family').value = state.family; $('size').value = state.size; $('measure').value = state.measure; $('leading').value = state.leading; $('align').value = state.align; } // Quick bar bindings $('theme').addEventListener('change', e => { state.theme = e.target.value; render(); }); $('size').addEventListener('input', e => { state.size = +e.target.value; setVar('--reader-font-size', state.size + 'rem'); $('sizeOut').value = state.size.toFixed(2) + 'rem'; }); $('measure').addEventListener('input', e => { state.measure = parseInt(e.target.value, 10); setVar('--reader-max-width', state.measure + 'ch'); $('measureOut').value = state.measure + 'ch'; }); $('focus').addEventListener('click', () => { state.focus = !state.focus; render(); }); // More panel bindings $('mag').addEventListener('change', e => { state.mag = e.target.value; render(); }); $('imgmode').addEventListener('change', e => { state.imgmode = e.target.value; render(); }); $('family').addEventListener('change', e => { state.family = e.target.value; render(); }); $('leading').addEventListener('input', e => { state.leading = +e.target.value; setVar('--reader-line-height', state.leading); $('leadingOut').value = state.leading.toFixed(2); }); $('align').addEventListener('change', e => { state.align = e.target.value; setVar('--reader-text-align', state.align); }); // Spacing sliders appear in panel markup const lspace = $('lspace'), wspace = $('wspace'); if (lspace) lspace.addEventListener('input', e => { state.lspace = +e.target.value; setVar('--reader-letter-spacing', state.lspace + 'em'); }); if (wspace) wspace.addEventListener('input', e => { state.wspace = +e.target.value; setVar('--reader-word-spacing', state.wspace + 'em'); }); // Storage const status = $('status'); function say(msg){ if(!status) return; status.textContent = msg; clearTimeout(say._t); say._t = setTimeout(()=>status.textContent='', 2000); } $('save-session').addEventListener('click', () => { sessionStorage.setItem(KEY, JSON.stringify(state)); say('Saved for this tab.'); }); $('save-persist').addEventListener('click', () => { localStorage.setItem(KEY, JSON.stringify(state)); say('Saved as device default.'); }); $('reset').addEventListener('click', () => { state = { ...defaults }; sessionStorage.removeItem(KEY); render(); say('Reset.'); }); // Keyboard shortcuts for quick bar document.addEventListener('keydown', (ev) => { if (['INPUT','SELECT','TEXTAREA'].includes(ev.target.tagName)) return; if (ev.key === '+'){ ev.preventDefault(); state.size = Math.min(1.75, +(state.size + 0.0625).toFixed(4)); render(); } if (ev.key === '-' || ev.key === '_'){ ev.preventDefault(); state.size = Math.max(0.75, +(state.size - 0.0625).toFixed(4)); render(); } if (ev.key === '['){ ev.preventDefault(); state.measure = Math.max(40, state.measure - 1); render(); } if (ev.key === ']'){ ev.preventDefault(); state.measure = Math.min(80, state.measure + 1); render(); } if (ev.key.toLowerCase() === 'f'){ ev.preventDefault(); state.focus = !state.focus; render(); } }); // Keep summary aria-expanded in sync const tools = document.querySelector('details.tools > summary'); if (tools){ const detailsEl = tools.parentElement; detailsEl.addEventListener('toggle', () => { tools.setAttribute('aria-expanded', detailsEl.open ? 'true' : 'false'); }); } // Load state (function load(){ const raw = sessionStorage.getItem(KEY) || localStorage.getItem(KEY); if (raw) { try { state = { ...state, ...JSON.parse(raw) }; } catch {} } render(); })(); })(); </script>
